@inherits LayoutComponentBase

<FluentDesignTheme @bind-Mode="@_mode" @bind-OfficeColor="@_officeColor" StorageName="@AtlasConstants.ATLAS_THEME_STORAGE" />

<FluentLayout>
    <FluentToolbar id="toolbar-fluent-components-two" style="width:100%">
        <FluentIcon Value="@(new Icons.Regular.Size24.Globe())" />
        <FluentSpacer />
        <LoginDisplay />
        <ToggleMode @rendermode="InteractiveServer" />
    </FluentToolbar>
    <FluentStack Class="main" Orientation="Orientation.Horizontal" Width="100%">
        <NavMenu />
        <FluentBodyContent>
            <div class="content">
                @Body
            </div>
        </FluentBodyContent>
    </FluentStack>
</FluentLayout>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

<FluentTooltipProvider />

@code {
    [Inject]
    public IUserRequests? UserRequests { get; set; }

    [Inject]
    internal AuthenticationStateProvider? AuthenticationStateProvider { get; set; }

    private DesignThemeModes _mode;
    private OfficeColor? _officeColor = OfficeColor.Default;

    protected async override Task OnInitializedAsync()
    {
        if (UserRequests == null)
        {
            throw new NullReferenceException(nameof(UserRequests));
        }

        if (AuthenticationStateProvider == null)
        {
            throw new ArgumentNullException(nameof(AuthenticationStateProvider));
        }

        await base.OnInitializedAsync();

        bool isAuthenticatedAtlasUser = await AuthenticationStateProvider.IsAuthenticatedAtlasUser().ConfigureAwait(false);

        if (isAuthenticatedAtlasUser)
        {
            string? theme = await UserRequests.GetThemeAsync().ConfigureAwait(false);

            if (string.IsNullOrEmpty(theme))
            {
                _mode = DesignThemeModes.System;
            }
            else
            {
                switch(theme)
                {
                    case AtlasConstants.THEME_DARK:
                        _mode = DesignThemeModes.Dark;
                        break;
                    case AtlasConstants.THEME_LIGHT:
                        _mode = DesignThemeModes.Light;
                        break;
                    default:
                        _mode = DesignThemeModes.System;
                        break;
                }
            }
        }
    }
}