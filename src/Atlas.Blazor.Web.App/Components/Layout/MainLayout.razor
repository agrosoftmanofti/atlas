@inherits LayoutComponentBase

@using Microsoft.FluentUI.AspNetCore.Components.DesignTokens

<FluentLayout>
    <FluentHeader>
        <img src="/images/Atlas.png" Height="30" Width="30" />
        <FluentSpacer />
        <LoginDisplay/>
        @if(_isDarkMode)
        {
            <FluentIcon Value="@(new Icons.Regular.Size24.Lightbulb())"/>
        }
        else
        {
            <FluentIcon Value="@(new Icons.Regular.Size24.WeatherMoon())"/>
        }
    </FluentHeader>
    <FluentStack Class="main" Orientation="Orientation.Horizontal" Width="100%">
        <NavMenu />
        <FluentBodyContent>
            <div class="content">
                @Body
            </div>
        </FluentBodyContent>
    </FluentStack>
    <FluentFooter>
        <div class="link1">
            <a href="https://www.fluentui-blazor.net" target="_blank">Documentation and demos</a>
        </div>
        <div class="link2">
            <a href="https://learn.microsoft.com/en-us/aspnet/core/blazor" target="_blank">About Blazor</a>
        </div>
    </FluentFooter>
</FluentLayout>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code{

    [Inject]
    public AccentBaseColor? AccentBaseColor { get; set; }

    [Inject]
    public BaseLayerLuminance? BaseLayerLuminance { get; set; }

    protected bool _isDarkMode = false;

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (AccentBaseColor == null) throw new NullReferenceException(nameof(AccentBaseColor));

        if (firstRender)
        {
            string? exchangeColor = OfficeColor.Exchange.ToAttributeValue();
            await AccentBaseColor.WithDefault(exchangeColor?.ToSwatch()).ConfigureAwait(false);
        }

        // save preference to cookie

        await ChangeModeAsync().ConfigureAwait(false);
    }

    protected async Task ChangeModeAsync(bool changeToDarkMode)
    {
        _isDarkMode = changeToDarkMode;

        await ChangeModeAsync().ConfigureAwait(false);
    }

    private async Task ChangeModeAsync()
    {
        if (BaseLayerLuminance == null) throw new NullReferenceException(nameof(BaseLayerLuminance));

        StandardLuminance luminance = _isDarkMode ? StandardLuminance.DarkMode : StandardLuminance.LightMode;

        await BaseLayerLuminance.WithDefault(luminance.GetLuminanceValue()).ConfigureAwait(false);
    }
}