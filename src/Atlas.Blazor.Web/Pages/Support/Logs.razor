@page "/Logs"
@using System.Text.Json
@rendermode @(new InteractiveServerRenderMode(prerender: false))
@attribute [StreamRendering]

<PageTitle>Logs</PageTitle>

@if (_alert == null)
{
    <FluentCard>
        <FluentHeader>
            Logs
        </FluentHeader>

        @if (_isProcessing)
        {
            <CenterContent>
                <FluentProgressRing style="width: 82px; height: 82px;"></FluentProgressRing>
            </CenterContent>
        }
        else
        {
            <FluentToolbar Style="height:100px;">
                <Atlas.Blazor.Web.Components.Support.LogSearch SearchClicked="OnSearchClicked"/>
            </FluentToolbar>

            <FluentDataGrid TGridItem=Atlas.Core.Models.Log Items="@FilteredItems" ResizableColumns=true Pagination="_paginationState" GridTemplateColumns="0.1fr 0.5fr 0.5fr 1fr 1fr 0.5fr  0.5fr 0.2fr" Style="height: 600px;overflow:auto;">
                <TemplateColumn Align="@Align.Center">
                    <FluentIcon Value="@IconHelper.GetRegularSize16(context.Icon)" Color="@IconHelper.GetIconColor(context.Level)" />
                </TemplateColumn>
                <PropertyColumn Property="@(l => l.TimeStamp)" Sortable="true" Title="Time Stamp"/>
                <PropertyColumn Property="@(l => l.Level)" Sortable="true" Filtered="!string.IsNullOrWhiteSpace(_levelFilter)" Tooltip="true" Title="Level">
                    <ColumnOptions>
                        <div class="search-box">
                            <FluentSearch type="levelFilter" Autofocus=true @bind-Value=_levelFilter @oninput="HandleLevelFilter" @bind-Value:after="HandleLevelClear" Placeholder="Log level..." />
                        </div>
                    </ColumnOptions>
                </PropertyColumn>
                <PropertyColumn Property="@(l => l.Message)" Sortable="true" Filtered="!string.IsNullOrWhiteSpace(_messageFilter)" Tooltip="true" Title="Message">
                    <ColumnOptions>
                        <div class="search-box">
                            <FluentSearch type="messageFilter" Autofocus=true @bind-Value=_messageFilter @oninput="HandleMessageFilter" @bind-Value:after="HandleMessageClear" Placeholder="Message..." />
                        </div>
                    </ColumnOptions>
                </PropertyColumn>
                <PropertyColumn Property="@(l => l.Exception)" Sortable="true" Filtered="!string.IsNullOrWhiteSpace(_exceptionFilter)" Title="Exception">
                    <ColumnOptions>
                        <div class="search-box">
                            <FluentSearch type="exceptionFilter" Autofocus=true @bind-Value=_exceptionFilter @oninput="HandleExceptionFilter" @bind-Value:after="HandleExceptionClear" Placeholder="Exception..." />
                        </div>
                    </ColumnOptions>
                </PropertyColumn>
                <PropertyColumn Property="@(l => l.Context)" Sortable="true" Filtered="!string.IsNullOrWhiteSpace(_contextFilter)" Title="Context" >
                    <ColumnOptions>
                        <div class="search-box">
                            <FluentSearch type="contextFilter" Autofocus=true @bind-Value=_contextFilter @oninput="HandleContextFilter" @bind-Value:after="HandleContextClear" Placeholder="Context..." />
                        </div>
                    </ColumnOptions>
                </PropertyColumn>
                <PropertyColumn Property="@(l => l.User)" Sortable="true" Filtered="!string.IsNullOrWhiteSpace(_userFilter)" Title="User" >
                    <ColumnOptions>
                        <div class="search-box">
                            <FluentSearch type="userFilter" Autofocus=true @bind-Value=_userFilter @oninput="HandleUserFilter" @bind-Value:after="HandleUserClear" Placeholder="User..." />
                        </div>
                    </ColumnOptions>
                </PropertyColumn>
                <TemplateColumn Align="@Align.Center">
                    <FluentButton aria-label="Open" IconEnd="@(new Icons.Regular.Size16.MoreHorizontal())" OnClick="@(() => Open(context))" />
                </TemplateColumn>
            </FluentDataGrid>

            <FluentPaginator State="_paginationState" />
        }

        <FluentFooter>
        </FluentFooter>

    </FluentCard>
}
else
{
    <Atlas.Blazor.Web.Pages.Alert AlertType="@_alert.AlertType" Title="Logs" Message="@_alert.Message" />
}

@code {
    [Inject]
    public IGenericRequests? GenericRequests { get; set; }

    public IQueryable<Log>? FilteredItems
    {
        get
        {
            return _items?.Where(l => (string.IsNullOrWhiteSpace(_levelFilter) || (!string.IsNullOrWhiteSpace(l.Level) && l.Level.Contains(_levelFilter, StringComparison.CurrentCultureIgnoreCase)))
                                 && (string.IsNullOrWhiteSpace(_messageFilter) || (!string.IsNullOrWhiteSpace(l.Message) && l.Message.Contains(_messageFilter, StringComparison.CurrentCultureIgnoreCase)))
                                 && (string.IsNullOrWhiteSpace(_exceptionFilter) || (!string.IsNullOrWhiteSpace(l.Exception) && l.Exception.Contains(_exceptionFilter, StringComparison.CurrentCultureIgnoreCase)))
                                 && (string.IsNullOrWhiteSpace(_contextFilter) || (!string.IsNullOrWhiteSpace(l.Context) && l.Context.Contains(_contextFilter, StringComparison.CurrentCultureIgnoreCase)))
                                 && (string.IsNullOrWhiteSpace(_userFilter) || (!string.IsNullOrWhiteSpace(l.User) && l.User.Contains(_userFilter, StringComparison.CurrentCultureIgnoreCase))))
                                 .AsQueryable();
        }
    }

    private PaginationState _paginationState = new PaginationState();
    private IEnumerable<Log>? _items = new List<Log>();
    private string _levelFilter = string.Empty;
    private string _messageFilter = string.Empty;
    private string _exceptionFilter = string.Empty;
    private string _contextFilter = string.Empty;
    private string _userFilter = string.Empty;
    private bool _isProcessing = false;
    private LogArgs _logArgs = new();
    private Alert? _alert = null;

    protected override async Task OnInitializedAsync()
    {
        ArgumentNullException.ThrowIfNull(GenericRequests);

        _paginationState.ItemsPerPage = 20;

        _isProcessing = true;

        string logArgs = JsonSerializer.Serialize(new LogArgs());

        IAuthResponse<IEnumerable<Log>> response = await GenericRequests.GetListAsync<Log>(logArgs, AtlasAPIEndpoints.GET_LOGS)
                                                            .ConfigureAwait(false);

        if (!response.IsSuccess)
        {
            if (!string.IsNullOrWhiteSpace(response.Message))
            {
                _alert = new Models.Alert
                    {
                        AlertType = Alerts.ERROR,
                        Title = $"Error Logs",
                        Message = response.Message
                    };
            }
        }
        else
        {
            if (response.Result != null)
            {
                _items = response.Result;
            }
        }

        _isProcessing = false;
    }

    private void OnSearchClicked(LogArgs logArgs)
    {
        ArgumentNullException.ThrowIfNull(logArgs);
    }

    private void HandleLevelFilter(ChangeEventArgs args)
    {
        if (args.Value is string value)
        {
            _levelFilter = value;
        }
    }

    private void HandleLevelClear()
    {
        if (string.IsNullOrWhiteSpace(_levelFilter))
        {
            _levelFilter = string.Empty;
        }
    }

    private void HandleMessageFilter(ChangeEventArgs args)
    {
        if (args.Value is string value)
        {
            _messageFilter = value;
        }
    }

    private void HandleMessageClear()
    {
        if (string.IsNullOrWhiteSpace(_messageFilter))
        {
            _messageFilter = string.Empty;
        }
    }

    private void HandleExceptionFilter(ChangeEventArgs args)
    {
        if (args.Value is string value)
        {
            _exceptionFilter = value;
        }
    }

    private void HandleExceptionClear()
    {
        if (string.IsNullOrWhiteSpace(_exceptionFilter))
        {
            _exceptionFilter = string.Empty;
        }
    }

    private void HandleContextFilter(ChangeEventArgs args)
    {
        if (args.Value is string value)
        {
            _contextFilter = value;
        }
    }

    private void HandleContextClear()
    {
        if (string.IsNullOrWhiteSpace(_contextFilter))
        {
            _contextFilter = string.Empty;
        }
    }

        private void HandleUserFilter(ChangeEventArgs args)
    {
        if (args.Value is string value)
        {
            _userFilter = value;
        }
    }

    private void HandleUserClear()
    {
        if (string.IsNullOrWhiteSpace(_userFilter))
        {
            _userFilter = string.Empty;
        }
    }

    private void Open(Log l)
    {
        
    }
}