@page "/Permission"
@page "/Permission/{Id:int?}"
@rendermode InteractiveServer
@implements IDisposable

<PageTitle>Permission</PageTitle>

<FluentCard>
    <FluentHeader>
        Permission
    </FluentHeader>

    @if (_permission == null)
    {
        <FluentProgressRing style="width: 82px; height: 82px;"></FluentProgressRing>
    }
    else
    {
        <EditForm FormName="permission" EditContext="_currentEditContext">

            <FluentValidationValidator/>

            <FluentToolbar>
                <FluentButton Id="submit" aria-label="Save" Type="ButtonType.Submit" IconEnd="@(new Icons.Regular.Size20.Save())" />
                <FluentSpacer />
                <FluentButton Id="delete" aria-label="Delete" Type="ButtonType.Button" OnClick="OnDeleteAsync">
                    <FluentIcon Value="@(new Icons.Regular.Size20.Delete())" Title="Open" Color="Color.Error"/>
                </FluentButton>
                <FluentSpacer />
                <ValidationBadge Title="Permission" Messages="_messages"/>
            </FluentToolbar>

            <FluentAccordion>
                <FluentAccordionItem Expanded=true>
                    <HeadingTemplate>
                        @if (_permission.PermissionId.Equals(0))
                        {
                            <FluentLabel Typo="Typography.Body">New Permission</FluentLabel>
                        }
                        else
                        {
                            <FluentLabel Typo="Typography.Body">@($"Permission Id {_permission.PermissionId}")</FluentLabel>
                        }
                    </HeadingTemplate>
                    <ChildContent>
                        <div>
                            <FluentTextField Name="Name" @bind-Value="_permission.Name" Label="Name" />
                            <FluentValidationMessage For="@(() => _permission.Name)" />
                        </div>
                        <div>
                            <FluentTextField Name="Description" @bind-Value="_permission.Description" Label="Description" />
                            <FluentValidationMessage For="@(() => _permission.Description)" />
                        </div>
                    </ChildContent>
                </FluentAccordionItem>
            </FluentAccordion>

        </EditForm>
    }

    <FluentFooter>
        
    </FluentFooter>
</FluentCard>

@code {

    [Inject]
    internal PersistentComponentState? ApplicationState { get; set; }

    [Inject]
    public NavigationManager? NavigationManager { get; set; }

    [Inject]
    public IRequests? Requests { get; set; }

    [Parameter]
    public int? Id { get; set; }

    private EditContext? _currentEditContext;
    private PersistingComponentStateSubscription _persistingSubscription;
    private List<string> _messages = new();
    private Atlas.Core.Models.Permission? _permission = null;

    protected override async Task OnInitializedAsync()
    {
        ArgumentNullException.ThrowIfNull(Requests);
        ArgumentNullException.ThrowIfNull(ApplicationState);

        _persistingSubscription = ApplicationState.RegisterOnPersisting(PersistPermissionData);

        System.Diagnostics.Debug.WriteLine($"{GetType().Name} - OnInitialized - START");

        if (ApplicationState.TryTakeFromJson<Atlas.Core.Models.Permission?>($"{GetType().Name}", out Atlas.Core.Models.Permission? restored))
        {
            System.Diagnostics.Debug.WriteLine($"### {GetType().Name} - TryTakeFromJson - True");

            _permission = restored!;
        }
        else
        {
            System.Diagnostics.Debug.WriteLine($"### {GetType().Name} - TryTakeFromJson - False");

            if (!Id.HasValue || Id.Value <= 0)
            {
                _permission = Activator.CreateInstance<Atlas.Core.Models.Permission>();
            }
            else
            {
                IResponse<Atlas.Core.Models.Permission> response = await Requests.GetModelAsync<Atlas.Core.Models.Permission>(Id.Value, Atlas.Core.Constants.AtlasAPIEndpoints.GET_PERMISSION)
                    .ConfigureAwait(false);

                if (!response.IsSuccess)
                {
                    if (!string.IsNullOrWhiteSpace(response.Message))
                    {
                        var alert = new Models.Alert
                            {
                                AlertType = Alerts.ERROR,
                                Title = "Error",
                                Message = response.Message
                            };

                        NavigationManager?.NavigateTo(alert.Page);
                    }
                }
                else
                {
                    _permission = response.Result;
                }
            }
        }

        _currentEditContext = new EditContext(_permission ?? throw new NullReferenceException(nameof(_permission)));
        _currentEditContext.OnValidationStateChanged += CurrentEditContextOnValidationStateChanged;

        System.Diagnostics.Debug.WriteLine($"{GetType().Name} - OnInitialized - END");
    }

    private Task PersistPermissionData()
    {
        if (ApplicationState == null) throw new NullReferenceException(nameof(ApplicationState));

        if (_permission != null)
        {
            ApplicationState.PersistAsJson($"{GetType().Name}", _permission);

            System.Diagnostics.Debug.WriteLine($"### {GetType().Name} - PersistAsJson");
        }

        return Task.CompletedTask;
    }

    private async Task OnSubmitAsync()
    {
        // Process the valid form
    }

    private async Task OnDeleteAsync()
    {
        // Process the valid form
    }

    private void CurrentEditContextOnValidationStateChanged(object? sender, ValidationStateChangedEventArgs e)
    {
        int messagesCount = _messages.Count;

        _messages.Clear();

        if(_currentEditContext != null)
        {
            _messages.AddRange(_currentEditContext.GetValidationMessages());
        }

        if (messagesCount != _messages.Count)
        {
            StateHasChanged();
        }
    }

    void IDisposable.Dispose()
    {
        _persistingSubscription.Dispose();

        if (_currentEditContext != null) _currentEditContext.OnValidationStateChanged -= CurrentEditContextOnValidationStateChanged;

        System.Diagnostics.Debug.WriteLine($"### {GetType().Name} - Dispose");
    }
}