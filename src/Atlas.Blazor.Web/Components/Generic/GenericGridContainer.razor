@attribute [StreamRendering]
@typeparam T where T : class, new()

<PageTitle>@_title</PageTitle>

@if (_alert == null)
{
    <FluentCard>
        <FluentHeader>
            @_title
        </FluentHeader>

        @if (_isProcessing)
        {
            <CenterContent>
                <FluentProgressRing style="width: 82px; height: 82px;"></FluentProgressRing>
            </CenterContent>
        }
        else
        {
            <FluentToolbar>
                <FluentButton Id="create-new" aria-label="Create" IconEnd="@(new Icons.Regular.Size20.DocumentAdd())" OnClick="@(() => Create())" />
                <FluentTooltip Anchor="create-new">Create New</FluentTooltip>
            </FluentToolbar>
        
            @RenderGrid();

            <FluentPaginator State="@Pagination" />
        }

        <FluentFooter>
        </FluentFooter>
    </FluentCard>
}
else
{
    <Atlas.Blazor.Web.Pages.Alert AlertType="@_alert.AlertType" Title="@_title" Message="@_alert.Message" />
}

@code {
    [Inject]
    public NavigationManager? NavigationManager { get; set; }

    [Inject]
    public IRequests? Requests { get; set; }

    private Alert? _alert;   
    private IEnumerable<T>? _items = new List<T>();
    private DynamicType<T> _dynamicType = DynamicTypeHelper.Get<T>();

    private bool _isProcessing = false;
    protected string? _title { get; set; }
    protected string? _navigateTo { get; set; }
    protected string? _apiEndpoint { get; set; }
    protected int _itemsPerPage { get; set; } = 20;
    protected string? _filterFieldName { get; set; }
    protected string? _identityFieldName { get; set; }

    public string Filter = string.Empty;
    public PaginationState Pagination = new PaginationState();

    public IQueryable<T>? FilteredItems
    {
        get
        {
            if (string.IsNullOrWhiteSpace(_filterFieldName)) throw new NullReferenceException(nameof(_filterFieldName));
            if (string.IsNullOrWhiteSpace(Filter)) return _items?.AsQueryable();

            return _items?.AsQueryable().Where(i => !string.IsNullOrWhiteSpace(_dynamicType.GetValue(i, _filterFieldName) as string)
            && _dynamicType.GetValue(i, _filterFieldName).ToString().Contains(Filter, StringComparison.CurrentCultureIgnoreCase));
        }
    }

    public virtual RenderFragment RenderGrid()
    {
        throw new NotImplementedException($"{GetType().Name}.RenderGridBase must be overriden.");
    }

    protected override async Task OnInitializedAsync()
    {
        ArgumentNullException.ThrowIfNull(Requests);
        ArgumentNullException.ThrowIfNullOrWhiteSpace(_title);
        ArgumentNullException.ThrowIfNullOrWhiteSpace(_navigateTo);
        ArgumentNullException.ThrowIfNullOrWhiteSpace(_apiEndpoint);
        ArgumentNullException.ThrowIfNullOrWhiteSpace(_filterFieldName);
        ArgumentNullException.ThrowIfNullOrWhiteSpace(_identityFieldName);

        Pagination.ItemsPerPage = _itemsPerPage;

        _isProcessing = true;

        IResponse<IEnumerable<T>> response = await Requests.GetListAsync<T>(_apiEndpoint)
            .ConfigureAwait(false);

        if (!response.IsSuccess)
        {
            if (!string.IsNullOrWhiteSpace(response.Message))
            {
                _alert = new Models.Alert
                    {
                        AlertType = Alerts.ERROR,
                        Title = $"Error {_title}",
                        Message = response.Message
                    };
            }
        }
        else
        {
            if (response.Result != null)
            {
                _items = response.Result;
            }
        }

        _isProcessing = false;
    }

    protected void Create()
    {
        ArgumentNullException.ThrowIfNullOrWhiteSpace(_navigateTo);

        NavigationManager?.NavigateTo($"{_navigateTo}");
    }

    protected void Edit(T model)
    {
        ArgumentNullException.ThrowIfNullOrWhiteSpace(_navigateTo);
        ArgumentNullException.ThrowIfNullOrWhiteSpace(_identityFieldName);

        object? objId = _dynamicType.GetValue(model, _identityFieldName);

        if(objId is int id)
        {
            NavigationManager?.NavigateTo($"{_navigateTo}/{id}");
        }
    }

    protected void HandleNameFilter(ChangeEventArgs args)
    {
        if (args.Value is string value)
        {
            Filter = value;
        }
    }

    protected void HandleClear()
    {
        if (string.IsNullOrWhiteSpace(Filter))
        {
            Filter = string.Empty;
        }
    }
}
