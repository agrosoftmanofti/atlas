@page "/Permissions"
@rendermode InteractiveServer
@attribute [StreamRendering]

<PageTitle>Permissions</PageTitle>

<FluentGrid Spacing="3">

    <FluentGridItem xs="12">
        <FluentLabel Color="Color.Accent" Typo="Typography.Header">Permissions</FluentLabel>
    </FluentGridItem>

    <FluentGridItem xs="12">

        @if(_permissions == null)
        {
            <FluentProgressRing style="width: 82px; height: 82px;"></FluentProgressRing>
        }
        else
        {
            <FluentDataGrid TGridItem=Permission Items="@_filteredItems" ResizableColumns=true Pagination="@_pagination" GridTemplateColumns="0.2fr 1fr 0.2fr 0.2fr 0.2fr 0.2fr" Style="height: 405px;overflow:auto;">
                <PropertyColumn Property="@(p => p.PermissionId)" Sortable="true" Align="Align.Center" />
                <PropertyColumn Property="@(p => p.Name)" Sortable="true" Filtered="!string.IsNullOrWhiteSpace(_nameFilter)" Tooltip="true" Title="Name">
                    <ColumnOptions>
                        <div class="search-box">
                            <FluentSearch type="filter" Autofocus=true @bind-Value=_nameFilter @oninput="HandleNameFilter" @bind-Value:after="HandleClear" Placeholder="Permission name..." />
                        </div>
                    </ColumnOptions>
                </PropertyColumn>
            </FluentDataGrid>

            <FluentPaginator State="@_pagination" />
        }

    </FluentGridItem>

</FluentGrid>

@code {

    [Inject]
    public NavigationManager? NavigationManager { get; set; }

    [Inject]
    public IRequests? Requests { get; set; }

    bool _clearItems = false;
    string _nameFilter = string.Empty;
    PaginationState _pagination = new PaginationState { ItemsPerPage = 20 };
    IQueryable<Permission>? _permissions = null;
    IQueryable<Permission>? _filteredItems => _permissions?.Where(p => !string.IsNullOrWhiteSpace(p.Name) && p.Name.Contains(_nameFilter, StringComparison.CurrentCultureIgnoreCase));

    protected override async Task OnInitializedAsync()
    {
        System.Diagnostics.Debug.WriteLine($"{GetType().Name} - OnInitialized START");

        ArgumentNullException.ThrowIfNull(Requests);

        IResponse<IEnumerable<Permission>> response = await Requests.GetListAsync<Permission>(Atlas.Core.Constants.AtlasAPIEndpoints.GET_PERMISSIONS)
            .ConfigureAwait(false);

        if (!response.IsSuccess)
        {
            if (!string.IsNullOrWhiteSpace(response.Message))
            {
                var alert = new Models.Alert
                    {
                        AlertType = Alerts.ERROR,
                        Title = "Error",
                        Message = response.Message
                    };

                NavigationManager?.NavigateTo(alert.Page);
            }
        }
        else
        {
            if (response.Result != null)
            {
                _permissions = response.Result.AsQueryable();
            }
        }

        System.Diagnostics.Debug.WriteLine($"{GetType().Name} - OnInitialized END");
    }

    private void HandleNameFilter(ChangeEventArgs args)
    {
        if (args.Value is string value)
        {
            _nameFilter = value;
        }
    }

    private void HandleClear()
    {
        if (string.IsNullOrWhiteSpace(_nameFilter))
        {
            _nameFilter = string.Empty;
        }
    }
}
