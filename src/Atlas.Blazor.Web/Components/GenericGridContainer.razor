@attribute [StreamRendering]
@typeparam T where T : class, new()

<PageTitle>@Title</PageTitle>

<FluentCard>
    <FluentHeader>
        @Title
    </FluentHeader>

    @if (_filteredItems == null)
    {
        <FluentProgressRing style="width: 82px; height: 82px;"></FluentProgressRing>
    }
    else
    {
        <FluentToolbar>
            <FluentButton Id="create-new" aria-label="Create" IconEnd="@(new Icons.Regular.Size20.DocumentAdd())" OnClick="@(() => Create())" />
            <FluentTooltip Anchor="create-new">Create New</FluentTooltip>
        </FluentToolbar>
        
        @RenderGrid();

        <FluentPaginator State="@_pagination" />
    }

    <FluentFooter>
    </FluentFooter>
</FluentCard>

@code {
    [Inject]
    public NavigationManager? NavigationManager { get; set; }

    [Inject]
    public IRequests? Requests { get; set; }

    protected string? Title { get; set; }
    protected string? NavigateTo { get; set; }
    protected string? APIEndpoint { get; set; }
    protected int ItemsPerPage { get; set; } = 20;
    protected string? FilterFieldName { get; set; }
    protected string? IdentityFieldName { get; set; }

    protected string _nameFilter = string.Empty;
    protected PaginationState _pagination = new PaginationState();
    protected IEnumerable<T>? _items = new List<T>();
    protected IQueryable<T>? _filteredItems => _items?.AsQueryable(); //.Where(i => !string.IsNullOrWhiteSpace(i.Name) && i.Name.Contains(_nameFilter, StringComparison.CurrentCultureIgnoreCase));

    public virtual RenderFragment RenderGrid()
    {
        throw new NotImplementedException("RenderModule");
    }

    protected override async Task OnInitializedAsync()
    {
        System.Diagnostics.Debug.WriteLine($"{GetType().Name} - base.OnInitialized - START");

        ArgumentNullException.ThrowIfNull(Requests);
        ArgumentNullException.ThrowIfNullOrWhiteSpace(Title);
        ArgumentNullException.ThrowIfNullOrWhiteSpace(NavigateTo);
        ArgumentNullException.ThrowIfNullOrWhiteSpace(APIEndpoint);
        ArgumentNullException.ThrowIfNullOrWhiteSpace(FilterFieldName);
        ArgumentNullException.ThrowIfNullOrWhiteSpace(IdentityFieldName);

        _pagination.ItemsPerPage = ItemsPerPage;

        IResponse<IEnumerable<T>> response = await Requests.GetListAsync<T>(APIEndpoint)
            .ConfigureAwait(false);

        if (!response.IsSuccess)
        {
            if (!string.IsNullOrWhiteSpace(response.Message))
            {
                var alert = new Models.Alert
                    {
                        AlertType = Alerts.ERROR,
                        Title = "Error",
                        Message = response.Message
                    };

                NavigationManager?.NavigateTo(alert.Page);
            }
        }
        else
        {
            if (response.Result != null)
            {
                _items = response.Result;
            }
        }

        System.Diagnostics.Debug.WriteLine($"{GetType().Name} - base.OnInitialized - END");
    }

    protected void Create()
    {
        ArgumentNullException.ThrowIfNullOrWhiteSpace(NavigateTo);

        NavigationManager?.NavigateTo($"{NavigateTo}");
    }

    protected void Edit(T model)
    {
        ArgumentNullException.ThrowIfNullOrWhiteSpace(NavigateTo);

        // NavigationManager?.NavigateTo($"{NavigateTo}/{model.PermissionId}");
    }

    protected void HandleNameFilter(ChangeEventArgs args)
    {
        if (args.Value is string value)
        {
            _nameFilter = value;
        }
    }

    protected void HandleClear()
    {
        if (string.IsNullOrWhiteSpace(_nameFilter))
        {
            _nameFilter = string.Empty;
        }
    }
}
