@implements IDialogContentComponent<IconsDialogContent>

<FluentDialogHeader ShowDismiss="true">
    <FluentStack VerticalAlignment="VerticalAlignment.Center">
        <FluentIcon Value="@(new Icons.Regular.Size24.Globe())" />
        <FluentLabel Typo="Typography.PaneHeader">
            @Dialog?.Instance.Parameters.Title
        </FluentLabel>
    </FluentStack>
</FluentDialogHeader>

<FluentDialogBody>
    @if (_alert != null)
    {
        <Atlas.Blazor.Web.Pages.Alert AlertType="@_alert.AlertType" Title="@_alert.Title" Message="@_alert.Message" />
    }
    else if (FilteredItems != null)
    {
        <FluentSearch @bind-Value="_filter"
                      @bind-Value:after="OnSearch"
                      Immediate="true"
                      ImmediateDelay="400"
                      Placeholder="Icon name..." />
        <FluentStack Orientation="Orientation.Horizontal" Wrap="true">
            @foreach (OptionItem optionItem in _filterResults)
            {
                <FluentIcon Value="IconHelper.GetRegularSize20(optionItem.Icon)" OnClick="() => SelectAsync(optionItem?.Icon)" />
            }
        </FluentStack>
    }
</FluentDialogBody>

<FluentDialogFooter>
</FluentDialogFooter>

@code {
    [Inject]
    internal IOptionsService? OptionsService { get; set; }

    [CascadingParameter]
    public FluentDialog? Dialog { get; set; } = default!;

    [Parameter]
    public IconsDialogContent Content { get; set; } = default!;

    public IEnumerable<OptionItem>? FilteredItems
    {
        get
        {
            if (string.IsNullOrWhiteSpace(_filter)) return _source?.AsQueryable();

            return _source?.Where(o => !string.IsNullOrWhiteSpace(o.Display)
            && o.Display.Contains(_filter, StringComparison.CurrentCultureIgnoreCase));
        }
    }

    private IEnumerable<OptionItem> _source = [];
    private List<OptionItem> _filterResults = [];
    private string _filter = string.Empty;
    private Alert? _alert = null;

    protected override void OnInitialized()
    {
        ArgumentNullException.ThrowIfNull(Content);
        ArgumentNullException.ThrowIfNull(OptionsService);

        try
        {
            _source = OptionsService.GetOptionItems(Options.ICON_SIZE20_OPTION_ITEMS);

            if(!string.IsNullOrWhiteSpace(Content.Icon))
            {
                _filter = Content.Icon;
                OnSearch();
            }
        }
        catch(Exception ex)
        {
            _alert = new Alert
                {
                    AlertType = Alerts.ERROR,
                    Title = "Error",
                    Message = ex.Message
                };
        }
    }

    private void OnSearch()
    {
        if (!string.IsNullOrWhiteSpace(_filter))
        {
            List<OptionItem> results = _source
                .Where(o => !string.IsNullOrWhiteSpace(o.Display) && o.Display.Contains(_filter, StringComparison.OrdinalIgnoreCase))
                .Select(o => o)
                .ToList();

            _filterResults = results.Any() ? results : [];
        }
        else
        {
            _filterResults = [];
        }
    }

    private async Task SelectAsync(string? icon)
    {
        Content.Icon = icon;
        await Dialog!.CloseAsync(Content);
    }

    private async Task CancelAsync()
    {
        await Dialog!.CloseAsync(Content);
    }
}