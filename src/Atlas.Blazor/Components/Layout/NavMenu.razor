@if (_modules != null)
{
    @foreach (var module in _modules)
    {
        @RenderModule(module);
    }
}

@code {
    [Inject]
    internal IUserRequests? ModuleRequest { get; set; }

    [Inject]
    internal AuthenticationStateProvider? AuthenticationStateProvider { get; set; }

    private IEnumerable<Module>? _modules = new List<Module>();

    protected async override Task OnParametersSetAsync()
    {
        if (AuthenticationStateProvider == null)
        {
            throw new ArgumentNullException(nameof(AuthenticationStateProvider));    
        }

        if (ModuleRequest == null)
        {
            throw new ArgumentNullException(nameof(ModuleRequest));
        }

        bool isAuthenticatedAtlasUser = await AuthenticationStateProvider.IsAuthenticatedAtlasUser().ConfigureAwait(false);

        if (isAuthenticatedAtlasUser)
        {
            _modules = await ModuleRequest.GetClaimModulesAsync().ConfigureAwait(false);
        }

        await base.OnParametersSetAsync().ConfigureAwait(false);
    }

    private RenderFragment RenderModule(Module module) => __builder =>
    {
        @if (module != null)
        {
            <MudNavGroup Title="@module.Name" Icon=@IconHelper.GetOutlined(module.Icon) HideExpandIcon="true" Expanded="true">
                @foreach (var category in module.Categories)
                {
                    <MudNavGroup Title="@category.Name" Icon=@IconHelper.GetOutlined(category.Icon) HideExpandIcon="true" Expanded="true">
                        @foreach (var menuItem in category.MenuItems)
                        {
                            <MudNavLink Href=@($@"{menuItem.NavigatePage}\Reset\{menuItem.PageCode}\{true}") Icon=@IconHelper.GetOutlined(menuItem.Icon) @onclick:stopPropagation="true" Match="NavLinkMatch.All">@menuItem.Name</MudNavLink>
                        }
                    </MudNavGroup>
                }
            </MudNavGroup>
        }
    };
}