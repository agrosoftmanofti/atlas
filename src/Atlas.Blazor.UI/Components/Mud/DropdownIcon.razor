@using Microsoft.AspNetCore.Components.Forms
@using System.Reflection
@using System.Linq.Expressions

@typeparam T where T : class, new()
@inherits DropdownIconBase<T>

@if (string.IsNullOrWhiteSpace(ModelPropertyRender?.Tooltip))
{
    <MudSelect T="string" 
               @bind-Value="PropertyValue"
               For="FieldExpression"
               Label="@ModelPropertyRender?.Label"
               Variant="Variant.Outlined" 
               AnchorOrigin="Origin.BottomCenter" 
               MultiSelection="false"
               ReadOnly="@(ModelPropertyRender == null ? false : ModelPropertyRender.ReadOnly)">
        @if (_iconOptionItems != null)
        {
            @foreach (var optionItem in _iconOptionItems)
            {
                <MudSelectItem T="string" Value="@optionItem.Id">@optionItem.Display</MudSelectItem>
            }
        }
    </MudSelect>            
}
else
{
    <MudTooltip Text="@ModelPropertyRender?.Tooltip" Placement="Placement.Top" Arrow="true" RootStyle="width: 100%">
        <MudSelect T="string"
                   @bind-Value="PropertyValue"
                   For="FieldExpression"
                   Label="@ModelPropertyRender?.Label"
                   Variant="Variant.Outlined" 
                   AnchorOrigin="Origin.BottomCenter" 
                   MultiSelection="false"
                   ReadOnly="@(ModelPropertyRender == null ? false : ModelPropertyRender.ReadOnly)">
            @if (_iconOptionItems != null)
            {
                @foreach (var optionItem in _iconOptionItems)
                {
                    <MudSelectItem T="string" Value="@optionItem.Id">
                        <MudIcon Icon="@optionItem.Icon" height="14" class="mr-1" />@optionItem.Display
                    </MudSelectItem>
                }
            }
        </MudSelect>
    </MudTooltip>    
}