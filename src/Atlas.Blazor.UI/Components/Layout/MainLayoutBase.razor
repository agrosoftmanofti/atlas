<MudThemeProvider Theme="_theme" @bind-IsDarkMode="@_isDarkMode" />
<MudDialogProvider/>
<MudSnackbarProvider/>

<MudLayout>
    <MudAppBar Elevation="0">
        <MudTooltip Text="@(_drawerOpen ? Buttons.NAVIGATION_MENU_TOOLTIP_HIDE : Buttons.NAVIGATION_MENU_TOOLTIP_SHOW)">
            <MudIconButton Icon="@Icons.Material.Outlined.Menu" Color="Color.Inherit" OnClick="@((e) => DrawerToggle())" Class="ml-3" />
        </MudTooltip>
        <MudImage Height="30" Width="30" Src="/images/Atlas.png" Alt="Atlas"/>
        <Breadcrumbs />
        <MudSpacer />
        @LoginDisplayFragment
        <MudTooltip Text="@(_isDarkMode ? Mode.LIGHT : Mode.DARK)" Color="Color.Inherit">
            <MudToggleIconButton Toggled="@_isDarkMode"
                                 Icon="@Icons.Material.Filled.DarkMode" 
                                 Color="Color.Inherit"
                                 ToggledIcon="@Icons.Material.Filled.WbSunny"
                                 ToggledColor="Color.Inherit"
                                 ToggledChanged="ToggledChangedAsync" />
        </MudTooltip>
    </MudAppBar>
    <AuthorizeView>
        <Authorized>
            <MudDrawer @bind-Open="_drawerOpen" Elevation="1" ClipMode="DrawerClipMode.Always">
                <NavMenu />           
            </MudDrawer>
        </Authorized>
    </AuthorizeView>
    <MudMainContent>
        <AuthorizeView>
            <Authorized>
                <MudContainer MaxWidth="MaxWidth.False">
                    @BodyFragment
                </MudContainer>
            </Authorized>
        </AuthorizeView>
    </MudMainContent>
</MudLayout>

@code {
    [Inject]
    public IUserRequests? UserRequests { get; set; }

    [Inject]
    internal AuthenticationStateProvider? AuthenticationStateProvider { get; set; }

    [Parameter]
    public RenderFragment? LoginDisplayFragment { get; set; }

    [Parameter]
    public RenderFragment? BodyFragment { get; set; }

    private AtlasTheme _theme = new();
    private bool _isDarkMode = false;
    private bool _drawerOpen = true;

    protected async override Task OnInitializedAsync()
    {
        if (UserRequests == null)
        {
            throw new NullReferenceException(nameof(UserRequests));
        }

        if (AuthenticationStateProvider == null)
        {
            throw new ArgumentNullException(nameof(AuthenticationStateProvider));
        }

        await base.OnInitializedAsync();

        bool isAuthenticatedAtlasUser = await AuthenticationStateProvider.IsAuthenticatedAtlasUser().ConfigureAwait(false);

        if (isAuthenticatedAtlasUser)
        {
            string? theme = await UserRequests.GetThemeAsync().ConfigureAwait(false);

            if (!string.IsNullOrEmpty(theme) && theme.Equals(AtlasConstants.THEME_DARK))
            {
                _isDarkMode = true;
            }
            else
            {
                _isDarkMode = false;
            }
        }
    }

    private async Task ToggledChangedAsync(bool value)
    {
        if (UserRequests == null)
        {
            throw new NullReferenceException(nameof(UserRequests));
        }

        if (AuthenticationStateProvider == null)
        {
            throw new ArgumentNullException(nameof(AuthenticationStateProvider));
        }

        _isDarkMode = value;

        bool isAuthenticatedAtlasUser = await AuthenticationStateProvider.IsAuthenticatedAtlasUser().ConfigureAwait(false);

        if (isAuthenticatedAtlasUser)
        {
            string theme = _isDarkMode ? AtlasConstants.THEME_DARK : AtlasConstants.THEME_LIGHT;

            await UserRequests.SetThemeAsync(theme).ConfigureAwait(false);
        }
    }

    private void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }
}